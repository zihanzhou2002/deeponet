(.venv) C:\Users\zzh\Desktop\Oxford\dissertation>python deeponet\src\harm_oscil_deeponet.py
2025-02-02 17:59:10.960018: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-02 17:59:12.193516: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.

Using backend: pytorch
Other supported backends: tensorflow.compat.v1, tensorflow, jax, paddle.
paddle supports more examples now and is recommended.
Using DeepONet

Test dataset generated
Length of X_train2
Shape of first element (3, 2)
Shape of second element (3, 1)
Shape of y_train 3
Shape of first element (2,)

Initial conditions : [[-0.618967    0.81779593]
 [-0.5133395   1.0975341 ]
 [-1.4371821  -1.4325413 ]]

Time location = [[0.45605743]
 [0.64407796]
 [3.5398464 ]]

ground truth = [-0.1955389  1.0068142]

Triple Dataset created

Using DeepONet(
  (branch): FNN(
    (linears): ModuleList(
      (0): Linear(in_features=2, out_features=40, bias=True)
      (1): Linear(in_features=40, out_features=40, bias=True)
    )
  )
  (trunk): FNN(
    (linears): ModuleList(
      (0): Linear(in_features=1, out_features=40, bias=True)
      (1): Linear(in_features=40, out_features=40, bias=True)
    )
  )
  (b): ParameterList(
      (0): Parameter containing: [torch.float32 of size ]
      (1): Parameter containing: [torch.float32 of size ]
  )
)

Compiling model...
-----------------------
_compile_pytorch
'compile' took 1.340696 s

Training model...
-----------------------------------------------------------
Shape of self.train_state.X_train 2
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[-0.6190,  0.8178],
        [-0.5133,  1.0975],
        [-1.4372, -1.4325]], requires_grad=True), tensor([[0.4561],
        [0.6441],
        [3.5398]], requires_grad=True))

    
    Start forward------------------------
    inputs length = 2
    x_func = torch.Size([3, 2])
    tensor([[-0.6190,  0.8178],
            [-0.5133,  1.0975],
            [-1.4372, -1.4325]], requires_grad=True)
    x_loc shape = torch.Size([3, 1])
    tensor([[0.4561],
            [0.6441],
            [3.5398]], requires_grad=True)
        Calling deeponet strategy--------------------------------------
        Branch output : torch.Size([3, 40])
        Trunk output torch.Size([3, 40])
        i = 0
        branch : torch.Size([3, 40])
        tensor([[-0.0373, -0.1433,  0.0813, -0.2287, -0.1399, -0.0901, -0.0124,  0.0635,
                0.4449, -0.1449,  0.2030, -0.0718, -0.4102,  0.1339, -0.0171,  0.1636,
                -0.1100, -0.1124,  0.1041,  0.1529,  0.0111,  0.1031, -0.1345, -0.1402,
                0.0282,  0.1517, -0.0716, -0.2603, -0.1136, -0.1012,  0.3401,  0.1942,
                -0.0361, -0.0795,  0.0662, -0.0887,  0.0946, -0.1943, -0.1654,  0.1412],
                [-0.0290, -0.1607,  0.0862, -0.2952, -0.1325, -0.0846,  0.0080,  0.0921,
                0.5097, -0.1415,  0.2655, -0.0636, -0.4603,  0.1498, -0.0223,  0.2136,
                -0.1500, -0.1129,  0.0621,  0.1817, -0.0018,  0.0421, -0.1611, -0.1999,
                0.0175,  0.1753, -0.0531, -0.2540, -0.1070, -0.1134,  0.4423,  0.2094,
                -0.0771, -0.0809,  0.0473, -0.0829,  0.0726, -0.2312, -0.2006,  0.1846],
                [ 0.0694, -0.1907, -0.1145,  0.3124, -0.0062, -0.4000, -0.2050,  0.4974,
                0.1453, -0.1656,  0.2650,  0.0761, -0.1346,  0.3376, -0.0204, -0.0072,
                0.2263, -0.1142,  0.5068,  0.0414,  0.3526,  0.2288, -0.0771, -0.4519,
                -0.0935, -0.0859,  0.1544, -0.2511, -0.3772,  0.0200,  0.1199,  0.2972,
                0.1569, -0.3183,  0.5482, -0.4012, -0.2443, -0.2950,  0.2053, -0.0621]],
            grad_fn=<AddmmBackward0>)
        trunk : torch.Size([3, 40])
        tensor([[0.0000, 0.0633, 0.0522, 0.0601, 0.0000, 0.0000, 0.0000, 0.0309, 0.0071,
                0.0000, 0.0637, 0.0043, 0.0000, 0.0000, 0.0000, 0.0527, 0.0406, 0.0000,
                0.0000, 0.0663, 0.0000, 0.0000, 0.0973, 0.0042, 0.0000, 0.0000, 0.0000,
                0.0000, 0.0000, 0.0000, 0.0898, 0.0000, 0.0497, 0.0000, 0.0000, 0.0492,
                0.0000, 0.0170, 0.0000, 0.0000],
                [0.0000, 0.0893, 0.0737, 0.0849, 0.0000, 0.0000, 0.0000, 0.0437, 0.0101,
                0.0000, 0.0899, 0.0061, 0.0000, 0.0000, 0.0000, 0.0745, 0.0574, 0.0000,
                0.0000, 0.0937, 0.0000, 0.0000, 0.1375, 0.0060, 0.0000, 0.0000, 0.0000,
                0.0000, 0.0000, 0.0000, 0.1268, 0.0000, 0.0701, 0.0000, 0.0000, 0.0695,
                0.0000, 0.0241, 0.0000, 0.0000],
                [0.0000, 0.4910, 0.4052, 0.4667, 0.0000, 0.0000, 0.0000, 0.2400, 0.0553,
                0.0000, 0.4942, 0.0333, 0.0000, 0.0000, 0.0000, 0.4094, 0.3153, 0.0000,
                0.0000, 0.5148, 0.0000, 0.0000, 0.7555, 0.0329, 0.0000, 0.0000, 0.0000,
                0.0000, 0.0000, 0.0000, 0.6968, 0.0000, 0.3855, 0.0000, 0.0000, 0.3819,
                0.0000, 0.1322, 0.0000, 0.0000]], grad_fn=<ReluBackward0>)
        x = torch.Size([3, 1])
        tensor([[0.0135],
                [0.0239],
                [0.3564]], grad_fn=<AsStridedBackward0>)
        i = 1
        branch : torch.Size([3, 40])
        tensor([[-0.0373, -0.1433,  0.0813, -0.2287, -0.1399, -0.0901, -0.0124,  0.0635,
                0.4449, -0.1449,  0.2030, -0.0718, -0.4102,  0.1339, -0.0171,  0.1636,
                -0.1100, -0.1124,  0.1041,  0.1529,  0.0111,  0.1031, -0.1345, -0.1402,
                0.0282,  0.1517, -0.0716, -0.2603, -0.1136, -0.1012,  0.3401,  0.1942,
                -0.0361, -0.0795,  0.0662, -0.0887,  0.0946, -0.1943, -0.1654,  0.1412],
                [-0.0290, -0.1607,  0.0862, -0.2952, -0.1325, -0.0846,  0.0080,  0.0921,
                0.5097, -0.1415,  0.2655, -0.0636, -0.4603,  0.1498, -0.0223,  0.2136,
                -0.1500, -0.1129,  0.0621,  0.1817, -0.0018,  0.0421, -0.1611, -0.1999,
                0.0175,  0.1753, -0.0531, -0.2540, -0.1070, -0.1134,  0.4423,  0.2094,
                -0.0771, -0.0809,  0.0473, -0.0829,  0.0726, -0.2312, -0.2006,  0.1846],
                [ 0.0694, -0.1907, -0.1145,  0.3124, -0.0062, -0.4000, -0.2050,  0.4974,
                0.1453, -0.1656,  0.2650,  0.0761, -0.1346,  0.3376, -0.0204, -0.0072,
                0.2263, -0.1142,  0.5068,  0.0414,  0.3526,  0.2288, -0.0771, -0.4519,
                -0.0935, -0.0859,  0.1544, -0.2511, -0.3772,  0.0200,  0.1199,  0.2972,
                0.1569, -0.3183,  0.5482, -0.4012, -0.2443, -0.2950,  0.2053, -0.0621]],
            grad_fn=<AddmmBackward0>)
        trunk : torch.Size([3, 40])
        tensor([[0.0000, 0.0633, 0.0522, 0.0601, 0.0000, 0.0000, 0.0000, 0.0309, 0.0071,
                0.0000, 0.0637, 0.0043, 0.0000, 0.0000, 0.0000, 0.0527, 0.0406, 0.0000,
                0.0000, 0.0663, 0.0000, 0.0000, 0.0973, 0.0042, 0.0000, 0.0000, 0.0000,
                0.0000, 0.0000, 0.0000, 0.0898, 0.0000, 0.0497, 0.0000, 0.0000, 0.0492,
                0.0000, 0.0170, 0.0000, 0.0000],
                [0.0000, 0.0893, 0.0737, 0.0849, 0.0000, 0.0000, 0.0000, 0.0437, 0.0101,
                0.0000, 0.0899, 0.0061, 0.0000, 0.0000, 0.0000, 0.0745, 0.0574, 0.0000,
                0.0000, 0.0937, 0.0000, 0.0000, 0.1375, 0.0060, 0.0000, 0.0000, 0.0000,
                0.0000, 0.0000, 0.0000, 0.1268, 0.0000, 0.0701, 0.0000, 0.0000, 0.0695,
                0.0000, 0.0241, 0.0000, 0.0000],
                [0.0000, 0.4910, 0.4052, 0.4667, 0.0000, 0.0000, 0.0000, 0.2400, 0.0553,
                0.0000, 0.4942, 0.0333, 0.0000, 0.0000, 0.0000, 0.4094, 0.3153, 0.0000,
                0.0000, 0.5148, 0.0000, 0.0000, 0.7555, 0.0329, 0.0000, 0.0000, 0.0000,
                0.0000, 0.0000, 0.0000, 0.6968, 0.0000, 0.3855, 0.0000, 0.0000, 0.3819,
                0.0000, 0.1322, 0.0000, 0.0000]], grad_fn=<ReluBackward0>)
        x = torch.Size([3, 1])
        tensor([[ 0.0074],
                [ 0.0160],
                [-0.1213]], grad_fn=<AsStridedBackward0>)
        xs shape = (2, 3)
        Output : torch.Size([3, 2])
        tensor([[ 0.0135,  0.0074],
                [ 0.0239,  0.0160],
                [ 0.3564, -0.1213]], grad_fn=<CatBackward0>)
        End deeponet call---------------------------------------
        
    x shape =torch.Size([3, 2])
    x = tensor([[ 0.0135,  0.0074],
            [ 0.0239,  0.0160],
            [ 0.3564, -0.1213]], grad_fn=<CatBackward0>)
    End forward--------------------------
outputs in outputs_losses = tensor([[ 0.0135,  0.0074],
        [ 0.0239,  0.0160],
        [ 0.3564, -0.1213]], grad_fn=<CatBackward0>)
targets = tensor([[-0.1955,  1.0068],
        [ 0.2485,  1.1859],
        [ 1.8803,  0.7631]])
End outputs losses in _compile_pytorch------------------------------------
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[1.5000, 1.0000]], requires_grad=True), tensor([[0.]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([1, 2])
 tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc shape = torch.Size([1, 1])
 tensor([[0.]], requires_grad=True)
Calling deeponet strategy--------------------------------------
Branch output : torch.Size([1, 40])
Trunk output torch.Size([1, 40])
i = 0
branch : torch.Size([1, 40])
 tensor([[ 0.0335, -0.1209, -0.0102, -0.2424, -0.0407, -0.0498,  0.0571,  0.3623,
          0.1194,  0.2321,  0.2758,  0.1592, -0.2326,  0.2077, -0.2328,  0.2353,
         -0.1255,  0.2360, -0.0471,  0.3492, -0.0350, -0.2108, -0.0456, -0.1723,
          0.0540,  0.1699,  0.0604, -0.0046, -0.2069, -0.0147,  0.2652, -0.0209,
          0.2538, -0.0947,  0.3291,  0.1590, -0.3605, -0.0248,  0.1440,  0.1728]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([1, 40])
 tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
       grad_fn=<ReluBackward0>)
x = torch.Size([1, 1])
 tensor([[0.]], grad_fn=<AsStridedBackward0>)
i = 1
branch : torch.Size([1, 40])
 tensor([[ 0.0335, -0.1209, -0.0102, -0.2424, -0.0407, -0.0498,  0.0571,  0.3623,
          0.1194,  0.2321,  0.2758,  0.1592, -0.2326,  0.2077, -0.2328,  0.2353,
         -0.1255,  0.2360, -0.0471,  0.3492, -0.0350, -0.2108, -0.0456, -0.1723,
          0.0540,  0.1699,  0.0604, -0.0046, -0.2069, -0.0147,  0.2652, -0.0209,
          0.2538, -0.0947,  0.3291,  0.1590, -0.3605, -0.0248,  0.1440,  0.1728]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([1, 40])
 tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
       grad_fn=<ReluBackward0>)
x = torch.Size([1, 1])
 tensor([[0.]], grad_fn=<AsStridedBackward0>)
xs shape = (2, 1)
Output : torch.Size([1, 2]) 
 tensor([[0., 0.]], grad_fn=<CatBackward0>)
End deeponet call---------------------------------------
x shape =torch.Size([1, 2])
x = tensor([[0., 0.]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[0., 0.]], grad_fn=<CatBackward0>)
targets = tensor([[1.5000, 1.0000]])
End outputs losses in _compile_pytorch------------------------------------
Step      Train loss    Test loss     Test metric
0         [9.28e-01]    [1.62e+00]    [1.00e+00]
Training using _train_sgd--------------------------------------------
Total iterations : 1
Iter i0
Current data :
X_train = (array([[-0.618967  ,  0.81779593],
       [-0.5133395 ,  1.0975341 ],
       [-1.4371821 , -1.4325413 ]], dtype=float32), array([[0.45605743],
       [0.64407796],
       [3.5398464 ]], dtype=float32))
y_train = [[-0.1955389  1.0068142]
 [ 0.2485329  1.1858877]
 [ 1.8802605  0.7630774]]
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[-0.6190,  0.8178],
        [-0.5133,  1.0975],
        [-1.4372, -1.4325]], requires_grad=True), tensor([[0.4561],
        [0.6441],
        [3.5398]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([3, 2])
 tensor([[-0.6190,  0.8178],
        [-0.5133,  1.0975],
        [-1.4372, -1.4325]], requires_grad=True)
x_loc shape = torch.Size([3, 1])
 tensor([[0.4561],
        [0.6441],
        [3.5398]], requires_grad=True)
Calling deeponet strategy--------------------------------------
Branch output : torch.Size([3, 40])
Trunk output torch.Size([3, 40])
i = 0
branch : torch.Size([3, 40])
 tensor([[-0.0373, -0.1433,  0.0813, -0.2287, -0.1399, -0.0901, -0.0124,  0.0635,
          0.4449, -0.1449,  0.2030, -0.0718, -0.4102,  0.1339, -0.0171,  0.1636,
         -0.1100, -0.1124,  0.1041,  0.1529,  0.0111,  0.1031, -0.1345, -0.1402,
          0.0282,  0.1517, -0.0716, -0.2603, -0.1136, -0.1012,  0.3401,  0.1942,
         -0.0361, -0.0795,  0.0662, -0.0887,  0.0946, -0.1943, -0.1654,  0.1412],
        [-0.0290, -0.1607,  0.0862, -0.2952, -0.1325, -0.0846,  0.0080,  0.0921,
          0.5097, -0.1415,  0.2655, -0.0636, -0.4603,  0.1498, -0.0223,  0.2136,
         -0.1500, -0.1129,  0.0621,  0.1817, -0.0018,  0.0421, -0.1611, -0.1999,
          0.0175,  0.1753, -0.0531, -0.2540, -0.1070, -0.1134,  0.4423,  0.2094,
         -0.0771, -0.0809,  0.0473, -0.0829,  0.0726, -0.2312, -0.2006,  0.1846],
        [ 0.0694, -0.1907, -0.1145,  0.3124, -0.0062, -0.4000, -0.2050,  0.4974,
          0.1453, -0.1656,  0.2650,  0.0761, -0.1346,  0.3376, -0.0204, -0.0072,
          0.2263, -0.1142,  0.5068,  0.0414,  0.3526,  0.2288, -0.0771, -0.4519,
         -0.0935, -0.0859,  0.1544, -0.2511, -0.3772,  0.0200,  0.1199,  0.2972,
          0.1569, -0.3183,  0.5482, -0.4012, -0.2443, -0.2950,  0.2053, -0.0621]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([3, 40]) 
 tensor([[0.0000, 0.0633, 0.0522, 0.0601, 0.0000, 0.0000, 0.0000, 0.0309, 0.0071,
         0.0000, 0.0637, 0.0043, 0.0000, 0.0000, 0.0000, 0.0527, 0.0406, 0.0000,
         0.0000, 0.0663, 0.0000, 0.0000, 0.0973, 0.0042, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0898, 0.0000, 0.0497, 0.0000, 0.0000, 0.0492,
         0.0000, 0.0170, 0.0000, 0.0000],
        [0.0000, 0.0893, 0.0737, 0.0849, 0.0000, 0.0000, 0.0000, 0.0437, 0.0101,
         0.0000, 0.0899, 0.0061, 0.0000, 0.0000, 0.0000, 0.0745, 0.0574, 0.0000,
         0.0000, 0.0937, 0.0000, 0.0000, 0.1375, 0.0060, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.1268, 0.0000, 0.0701, 0.0000, 0.0000, 0.0695,
         0.0000, 0.0241, 0.0000, 0.0000],
        [0.0000, 0.4910, 0.4052, 0.4667, 0.0000, 0.0000, 0.0000, 0.2400, 0.0553,
         0.0000, 0.4942, 0.0333, 0.0000, 0.0000, 0.0000, 0.4094, 0.3153, 0.0000,
         0.0000, 0.5148, 0.0000, 0.0000, 0.7555, 0.0329, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.6968, 0.0000, 0.3855, 0.0000, 0.0000, 0.3819,
         0.0000, 0.1322, 0.0000, 0.0000]], grad_fn=<ReluBackward0>)
x = torch.Size([3, 1])
 tensor([[0.0135],
        [0.0239],
        [0.3564]], grad_fn=<AsStridedBackward0>)
i = 1
branch : torch.Size([3, 40])
 tensor([[-0.0373, -0.1433,  0.0813, -0.2287, -0.1399, -0.0901, -0.0124,  0.0635,
          0.4449, -0.1449,  0.2030, -0.0718, -0.4102,  0.1339, -0.0171,  0.1636,
         -0.1100, -0.1124,  0.1041,  0.1529,  0.0111,  0.1031, -0.1345, -0.1402,
          0.0282,  0.1517, -0.0716, -0.2603, -0.1136, -0.1012,  0.3401,  0.1942,
         -0.0361, -0.0795,  0.0662, -0.0887,  0.0946, -0.1943, -0.1654,  0.1412],
        [-0.0290, -0.1607,  0.0862, -0.2952, -0.1325, -0.0846,  0.0080,  0.0921,
          0.5097, -0.1415,  0.2655, -0.0636, -0.4603,  0.1498, -0.0223,  0.2136,
         -0.1500, -0.1129,  0.0621,  0.1817, -0.0018,  0.0421, -0.1611, -0.1999,
          0.0175,  0.1753, -0.0531, -0.2540, -0.1070, -0.1134,  0.4423,  0.2094,
         -0.0771, -0.0809,  0.0473, -0.0829,  0.0726, -0.2312, -0.2006,  0.1846],
        [ 0.0694, -0.1907, -0.1145,  0.3124, -0.0062, -0.4000, -0.2050,  0.4974,
          0.1453, -0.1656,  0.2650,  0.0761, -0.1346,  0.3376, -0.0204, -0.0072,
          0.2263, -0.1142,  0.5068,  0.0414,  0.3526,  0.2288, -0.0771, -0.4519,
         -0.0935, -0.0859,  0.1544, -0.2511, -0.3772,  0.0200,  0.1199,  0.2972,
          0.1569, -0.3183,  0.5482, -0.4012, -0.2443, -0.2950,  0.2053, -0.0621]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([3, 40])
 tensor([[0.0000, 0.0633, 0.0522, 0.0601, 0.0000, 0.0000, 0.0000, 0.0309, 0.0071,
         0.0000, 0.0637, 0.0043, 0.0000, 0.0000, 0.0000, 0.0527, 0.0406, 0.0000,
         0.0000, 0.0663, 0.0000, 0.0000, 0.0973, 0.0042, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0898, 0.0000, 0.0497, 0.0000, 0.0000, 0.0492,
         0.0000, 0.0170, 0.0000, 0.0000],
        [0.0000, 0.0893, 0.0737, 0.0849, 0.0000, 0.0000, 0.0000, 0.0437, 0.0101,
         0.0000, 0.0899, 0.0061, 0.0000, 0.0000, 0.0000, 0.0745, 0.0574, 0.0000,
         0.0000, 0.0937, 0.0000, 0.0000, 0.1375, 0.0060, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.1268, 0.0000, 0.0701, 0.0000, 0.0000, 0.0695,
         0.0000, 0.0241, 0.0000, 0.0000],
        [0.0000, 0.4910, 0.4052, 0.4667, 0.0000, 0.0000, 0.0000, 0.2400, 0.0553,
         0.0000, 0.4942, 0.0333, 0.0000, 0.0000, 0.0000, 0.4094, 0.3153, 0.0000,
         0.0000, 0.5148, 0.0000, 0.0000, 0.7555, 0.0329, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.6968, 0.0000, 0.3855, 0.0000, 0.0000, 0.3819,
         0.0000, 0.1322, 0.0000, 0.0000]], grad_fn=<ReluBackward0>)
x = torch.Size([3, 1])
 tensor([[ 0.0074],
        [ 0.0160],
        [-0.1213]], grad_fn=<AsStridedBackward0>)
xs shape = (2, 3)
Output : torch.Size([3, 2])
 tensor([[ 0.0135,  0.0074],
        [ 0.0239,  0.0160],
        [ 0.3564, -0.1213]], grad_fn=<CatBackward0>)
End deeponet call---------------------------------------
x shape =torch.Size([3, 2])
x = tensor([[ 0.0135,  0.0074],
        [ 0.0239,  0.0160],
        [ 0.3564, -0.1213]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[ 0.0135,  0.0074],
        [ 0.0239,  0.0160],
        [ 0.3564, -0.1213]], grad_fn=<CatBackward0>)
targets = tensor([[-0.1955,  1.0068],
        [ 0.2485,  1.1859],
        [ 1.8803,  0.7631]])
End outputs losses in _compile_pytorch------------------------------------
Shape of self.train_state.X_train 2
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[-0.6190,  0.8178],
        [-0.5133,  1.0975],
        [-1.4372, -1.4325]], requires_grad=True), tensor([[0.4561],
        [0.6441],
        [3.5398]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([3, 2])
 tensor([[-0.6190,  0.8178],
        [-0.5133,  1.0975],
        [-1.4372, -1.4325]], requires_grad=True)
x_loc shape = torch.Size([3, 1])
 tensor([[0.4561],
        [0.6441],
        [3.5398]], requires_grad=True)
Calling deeponet strategy--------------------------------------
Branch output : torch.Size([3, 40])
Trunk output torch.Size([3, 40])
i = 0
branch : torch.Size([3, 40])
 tensor([[-3.5309e-02, -1.3762e-01,  8.8615e-02, -2.2434e-01, -1.3832e-01,
         -8.9447e-02, -1.2596e-02,  6.8208e-02,  4.4901e-01, -1.4790e-01,
          2.0868e-01, -6.6345e-02, -4.1223e-01,  1.3308e-01, -1.8246e-02,
          1.7043e-01, -1.0285e-01, -1.1136e-01,  1.0248e-01,  1.5792e-01,
          1.2447e-02,  1.0044e-01, -1.2939e-01, -1.3433e-01,  2.9925e-02,
          1.5183e-01, -7.2541e-02, -2.5999e-01, -1.1236e-01, -1.0185e-01,
          3.5051e-01,  1.9344e-01, -2.8861e-02, -7.9237e-02,  6.5116e-02,
         -8.2757e-02,  9.1883e-02, -1.9002e-01, -1.6655e-01,  1.4108e-01],
        [-2.6690e-02, -1.5406e-01,  9.4080e-02, -2.9061e-01, -1.3160e-01,
         -8.3882e-02,  7.6895e-03,  9.6590e-02,  5.1461e-01, -1.4473e-01,
          2.7208e-01, -5.7886e-02, -4.6294e-01,  1.4862e-01, -2.3028e-02,
          2.2140e-01, -1.4252e-01, -1.1223e-01,  6.0285e-02,  1.8748e-01,
         -2.0773e-04,  3.9397e-02, -1.5510e-01, -1.9390e-01,  1.8721e-02,
          1.7512e-01, -5.4701e-02, -2.5351e-01, -1.0574e-01, -1.1431e-01,
          4.5428e-01,  2.0860e-01, -6.8918e-02, -8.0468e-02,  4.6116e-02,
         -7.6851e-02,  7.0172e-02, -2.2623e-01, -2.0237e-01,  1.8442e-01],
        [ 6.4617e-02, -1.8032e-01, -1.0779e-01,  3.2510e-01, -1.4393e-03,
         -4.0100e-01, -2.0782e-01,  5.0431e-01,  1.5175e-01, -1.6719e-01,
          2.7241e-01,  8.4240e-02, -1.3510e-01,  3.3637e-01, -2.0062e-02,
          1.7515e-03,  2.3517e-01, -1.1048e-01,  5.0770e-01,  5.1016e-02,
          3.5749e-01,  2.2708e-01, -6.7790e-02, -4.4238e-01, -9.0645e-02,
         -7.8582e-02,  1.5325e-01, -2.5501e-01, -3.7635e-01,  1.9914e-02,
          1.2817e-01,  2.9599e-01,  1.6533e-01, -3.1800e-01,  5.4628e-01,
         -3.9154e-01, -2.4133e-01, -2.8749e-01,  2.0666e-01, -6.1813e-02]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([3, 40])
 tensor([[0.0000, 0.0611, 0.0513, 0.0637, 0.0000, 0.0000, 0.0000, 0.0350, 0.0081,
         0.0000, 0.0674, 0.0067, 0.0000, 0.0000, 0.0000, 0.0531, 0.0440, 0.0000,
         0.0000, 0.0704, 0.0000, 0.0000, 0.0949, 0.0010, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0928, 0.0000, 0.0523, 0.0000, 0.0000, 0.0470,
         0.0000, 0.0155, 0.0000, 0.0000],
        [0.0000, 0.0868, 0.0725, 0.0891, 0.0000, 0.0000, 0.0000, 0.0484, 0.0113,
         0.0000, 0.0943, 0.0090, 0.0000, 0.0000, 0.0000, 0.0744, 0.0613, 0.0000,
         0.0000, 0.0984, 0.0000, 0.0000, 0.1346, 0.0022, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.1303, 0.0000, 0.0733, 0.0000, 0.0000, 0.0668,
         0.0000, 0.0221, 0.0000, 0.0000],
        [0.0000, 0.4818, 0.3997, 0.4804, 0.0000, 0.0000, 0.0000, 0.2551, 0.0608,
         0.0000, 0.5084, 0.0434, 0.0000, 0.0000, 0.0000, 0.4036, 0.3284, 0.0000,
         0.0000, 0.5301, 0.0000, 0.0000, 0.7455, 0.0204, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.7087, 0.0000, 0.3963, 0.0000, 0.0000, 0.3724,
         0.0000, 0.1248, 0.0000, 0.0000]], grad_fn=<ReluBackward0>)
x = torch.Size([3, 1]) 
 tensor([[0.0181],
        [0.0304],
        [0.4122]], grad_fn=<AsStridedBackward0>)
i = 1
branch : torch.Size([3, 40])
 tensor([[-3.5309e-02, -1.3762e-01,  8.8615e-02, -2.2434e-01, -1.3832e-01,
         -8.9447e-02, -1.2596e-02,  6.8208e-02,  4.4901e-01, -1.4790e-01,
          2.0868e-01, -6.6345e-02, -4.1223e-01,  1.3308e-01, -1.8246e-02,
          1.7043e-01, -1.0285e-01, -1.1136e-01,  1.0248e-01,  1.5792e-01,
          1.2447e-02,  1.0044e-01, -1.2939e-01, -1.3433e-01,  2.9925e-02,
          1.5183e-01, -7.2541e-02, -2.5999e-01, -1.1236e-01, -1.0185e-01,
          3.5051e-01,  1.9344e-01, -2.8861e-02, -7.9237e-02,  6.5116e-02,
         -8.2757e-02,  9.1883e-02, -1.9002e-01, -1.6655e-01,  1.4108e-01],
        [-2.6690e-02, -1.5406e-01,  9.4080e-02, -2.9061e-01, -1.3160e-01,
         -8.3882e-02,  7.6895e-03,  9.6590e-02,  5.1461e-01, -1.4473e-01,
          2.7208e-01, -5.7886e-02, -4.6294e-01,  1.4862e-01, -2.3028e-02,
          2.2140e-01, -1.4252e-01, -1.1223e-01,  6.0285e-02,  1.8748e-01,
         -2.0773e-04,  3.9397e-02, -1.5510e-01, -1.9390e-01,  1.8721e-02,
          1.7512e-01, -5.4701e-02, -2.5351e-01, -1.0574e-01, -1.1431e-01,
          4.5428e-01,  2.0860e-01, -6.8918e-02, -8.0468e-02,  4.6116e-02,
         -7.6851e-02,  7.0172e-02, -2.2623e-01, -2.0237e-01,  1.8442e-01],
        [ 6.4617e-02, -1.8032e-01, -1.0779e-01,  3.2510e-01, -1.4393e-03,
         -4.0100e-01, -2.0782e-01,  5.0431e-01,  1.5175e-01, -1.6719e-01,
          2.7241e-01,  8.4240e-02, -1.3510e-01,  3.3637e-01, -2.0062e-02,
          1.7515e-03,  2.3517e-01, -1.1048e-01,  5.0770e-01,  5.1016e-02,
          3.5749e-01,  2.2708e-01, -6.7790e-02, -4.4238e-01, -9.0645e-02,
         -7.8582e-02,  1.5325e-01, -2.5501e-01, -3.7635e-01,  1.9914e-02,
          1.2817e-01,  2.9599e-01,  1.6533e-01, -3.1800e-01,  5.4628e-01,
         -3.9154e-01, -2.4133e-01, -2.8749e-01,  2.0666e-01, -6.1813e-02]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([3, 40])
 tensor([[0.0000, 0.0611, 0.0513, 0.0637, 0.0000, 0.0000, 0.0000, 0.0350, 0.0081,
         0.0000, 0.0674, 0.0067, 0.0000, 0.0000, 0.0000, 0.0531, 0.0440, 0.0000,
         0.0000, 0.0704, 0.0000, 0.0000, 0.0949, 0.0010, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.0928, 0.0000, 0.0523, 0.0000, 0.0000, 0.0470,
         0.0000, 0.0155, 0.0000, 0.0000],
        [0.0000, 0.0868, 0.0725, 0.0891, 0.0000, 0.0000, 0.0000, 0.0484, 0.0113,
         0.0000, 0.0943, 0.0090, 0.0000, 0.0000, 0.0000, 0.0744, 0.0613, 0.0000,
         0.0000, 0.0984, 0.0000, 0.0000, 0.1346, 0.0022, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.1303, 0.0000, 0.0733, 0.0000, 0.0000, 0.0668,
         0.0000, 0.0221, 0.0000, 0.0000],
        [0.0000, 0.4818, 0.3997, 0.4804, 0.0000, 0.0000, 0.0000, 0.2551, 0.0608,
         0.0000, 0.5084, 0.0434, 0.0000, 0.0000, 0.0000, 0.4036, 0.3284, 0.0000,
         0.0000, 0.5301, 0.0000, 0.0000, 0.7455, 0.0204, 0.0000, 0.0000, 0.0000,
         0.0000, 0.0000, 0.0000, 0.7087, 0.0000, 0.3963, 0.0000, 0.0000, 0.3724,
         0.0000, 0.1248, 0.0000, 0.0000]], grad_fn=<ReluBackward0>)
x = torch.Size([3, 1])
 tensor([[ 0.0128],
        [ 0.0237],
        [-0.0839]], grad_fn=<AsStridedBackward0>)
xs shape = (2, 3)
Output : torch.Size([3, 2])
 tensor([[ 0.0181,  0.0128],
        [ 0.0304,  0.0237],
        [ 0.4122, -0.0839]], grad_fn=<CatBackward0>)
End deeponet call---------------------------------------
x shape =torch.Size([3, 2])
x = tensor([[ 0.0181,  0.0128],
        [ 0.0304,  0.0237],
        [ 0.4122, -0.0839]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[ 0.0181,  0.0128],
        [ 0.0304,  0.0237],
        [ 0.4122, -0.0839]], grad_fn=<CatBackward0>)
targets = tensor([[-0.1955,  1.0068],
        [ 0.2485,  1.1859],
        [ 1.8803,  0.7631]])
End outputs losses in _compile_pytorch------------------------------------
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[1.5000, 1.0000]], requires_grad=True), tensor([[0.]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([1, 2])
 tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc shape = torch.Size([1, 1])
 tensor([[0.]], requires_grad=True)
Calling deeponet strategy--------------------------------------
Branch output : torch.Size([1, 40])
Trunk output torch.Size([1, 40])
i = 0
branch : torch.Size([1, 40])
 tensor([[ 0.0338, -0.1159, -0.0044, -0.2378, -0.0406, -0.0495,  0.0574,  0.3673,
          0.1247,  0.2317,  0.2809,  0.1643, -0.2329,  0.2075, -0.2331,  0.2408,
         -0.1198,  0.2365, -0.0475,  0.3542, -0.0350, -0.2110, -0.0403, -0.1670,
          0.0538,  0.1697,  0.0603, -0.0041, -0.2065, -0.0151,  0.2714, -0.0212,
          0.2593, -0.0945,  0.3290,  0.1640, -0.3609, -0.0199,  0.1435,  0.1729]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([1, 40])
 tensor([[0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6857e-03, 0.0000e+00, 1.6227e-04,
         0.0000e+00, 1.8306e-03, 4.9557e-04, 0.0000e+00, 1.7584e-03, 9.7780e-04,
         0.0000e+00, 0.0000e+00, 1.1644e-05, 1.3069e-03, 1.6770e-03, 0.0000e+00,
         3.6687e-05, 1.9400e-03, 3.6790e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         1.9599e-03, 0.0000e+00, 1.6600e-03, 0.0000e+00, 2.1996e-04, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 1.9185e-04, 0.0000e+00]],
       grad_fn=<ReluBackward0>)
x = torch.Size([1, 1])
 tensor([[0.0028]], grad_fn=<AsStridedBackward0>)
i = 1
branch : torch.Size([1, 40]) 
 tensor([[ 0.0338, -0.1159, -0.0044, -0.2378, -0.0406, -0.0495,  0.0574,  0.3673,
          0.1247,  0.2317,  0.2809,  0.1643, -0.2329,  0.2075, -0.2331,  0.2408,
         -0.1198,  0.2365, -0.0475,  0.3542, -0.0350, -0.2110, -0.0403, -0.1670,
          0.0538,  0.1697,  0.0603, -0.0041, -0.2065, -0.0151,  0.2714, -0.0212,
          0.2593, -0.0945,  0.3290,  0.1640, -0.3609, -0.0199,  0.1435,  0.1729]],
       grad_fn=<AddmmBackward0>)
trunk : torch.Size([1, 40])
 tensor([[0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6857e-03, 0.0000e+00, 1.6227e-04,
         0.0000e+00, 1.8306e-03, 4.9557e-04, 0.0000e+00, 1.7584e-03, 9.7780e-04,
         0.0000e+00, 0.0000e+00, 1.1644e-05, 1.3069e-03, 1.6770e-03, 0.0000e+00,
         3.6687e-05, 1.9400e-03, 3.6790e-04, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
         1.9599e-03, 0.0000e+00, 1.6600e-03, 0.0000e+00, 2.1996e-04, 0.0000e+00,
         0.0000e+00, 0.0000e+00, 1.9185e-04, 0.0000e+00]],
       grad_fn=<ReluBackward0>)
x = torch.Size([1, 1])
 tensor([[0.0020]], grad_fn=<AsStridedBackward0>)
xs shape = (2, 1)
Output : torch.Size([1, 2])
 tensor([[0.0028, 0.0020]], grad_fn=<CatBackward0>)
End deeponet call---------------------------------------
x shape =torch.Size([1, 2])
x = tensor([[0.0028, 0.0020]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[0.0028, 0.0020]], grad_fn=<CatBackward0>)
targets = tensor([[1.5000, 1.0000]])
End outputs losses in _compile_pytorch------------------------------------
1         [8.84e-01]    [1.62e+00]    [9.96e-01]
End training with sgd-------------------------------
Best model at step 1:
  train loss: 8.84e-01
  test loss: 1.62e+00
  test metric: [9.96e-01]

Finished Training------------------------------------------------
'train' took 0.088190 s