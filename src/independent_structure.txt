(.venv) C:\Users\zzh\Desktop\Oxford\dissertation>python deeponet\src\harm_oscil_deeponet.py
2025-02-02 18:18:22.368734: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-02 18:18:23.488297: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Using backend: pytorch
Other supported backends: tensorflow.compat.v1, tensorflow, jax, paddle.
paddle supports more examples now and is recommended.


Using DeepONet
Warning: There are 2 outputs, but no multi_output_strategy selected. Use "independent" as the multi_output_strategy.
Test dataset generated

Length of X_train2
Shape of first element (3, 2)
Shape of second element (3, 1)
Shape of y_train 3
Shape of first element (2,)
Initial conditions : [[ 0.0715442  -1.3238486 ]
 [-0.95658875  1.525851  ]
 [ 0.1312452   1.8472403 ]]
Time location = [[4.3563266]
 [4.6872735]
 [1.1838968]]
ground truth = [1.2158731  0.52853215]
Triple Dataset created


Using DeepONet(
  (branch): ModuleList(
    (0-1): 2 x FNN(
      (linears): ModuleList(
        (0): Linear(in_features=2, out_features=40, bias=True)
        (1): Linear(in_features=40, out_features=40, bias=True)
      )
    )
  )
  (trunk): ModuleList(
    (0-1): 2 x FNN(
      (linears): ModuleList(
        (0): Linear(in_features=1, out_features=40, bias=True)
        (1): Linear(in_features=40, out_features=40, bias=True)
      )
    )
  )
  (b): ParameterList(
      (0): Parameter containing: [torch.float32 of size ]
      (1): Parameter containing: [torch.float32 of size ]
  )
)
Compiling model...
-----------------------
_compile_pytorch
'compile' took 2.263426 s

Training model...
-----------------------------------------------------------
Shape of self.train_state.X_train 2
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True), tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([3, 2])
 tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc shape = torch.Size([3, 1])
 tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
Calling Independent strategy--------------------------------------
Input x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
Input x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
i = 0
x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
x = tensor([[-0.0601],
        [-0.9845],
        [-0.1878]], grad_fn=<AsStridedBackward0>)
i = 1
x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
x = tensor([[ 0.0931],
        [-0.2357],
        [-0.0486]], grad_fn=<AsStridedBackward0>)
xs = [tensor([[-0.0601],
        [-0.9845],
        [-0.1878]], grad_fn=<AsStridedBackward0>), tensor([[ 0.0931],
        [-0.2357],
        [-0.0486]], grad_fn=<AsStridedBackward0>)]
Ouputs = tensor([[-0.0601,  0.0931],
        [-0.9845, -0.2357],
        [-0.1878, -0.0486]], grad_fn=<CatBackward0>)
x shape =torch.Size([3, 2])
x = tensor([[-0.0601,  0.0931],
        [-0.9845, -0.2357],
        [-0.1878, -0.0486]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[-0.0601,  0.0931],
        [-0.9845, -0.2357],
        [-0.1878, -0.0486]], grad_fn=<CatBackward0>)
targets = tensor([[ 1.2159,  0.5285],
        [-1.5013, -0.9946],
        [ 1.7602,  0.5755]])
End outputs losses in _compile_pytorch------------------------------------
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[1.5000, 1.0000]], requires_grad=True), tensor([[0.]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([1, 2]) 
 tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc shape = torch.Size([1, 1])
 tensor([[0.]], requires_grad=True)
Calling Independent strategy--------------------------------------
Input x_func = tensor([[1.5000, 1.0000]], requires_grad=True)
Input x_loc= tensor([[0.]], requires_grad=True)
i = 0
x_func = tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc= tensor([[0.]], requires_grad=True)
x = tensor([[0.]], grad_fn=<AsStridedBackward0>)
i = 1
x_func = tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc= tensor([[0.]], requires_grad=True)
x = tensor([[0.]], grad_fn=<AsStridedBackward0>)
xs = [tensor([[0.]], grad_fn=<AsStridedBackward0>), tensor([[0.]], grad_fn=<AsStridedBackward0>)]
Ouputs = tensor([[0., 0.]], grad_fn=<CatBackward0>)
x shape =torch.Size([1, 2])
x = tensor([[0., 0.]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[0., 0.]], grad_fn=<CatBackward0>)
targets = tensor([[1.5000, 1.0000]])
End outputs losses in _compile_pytorch------------------------------------
Step      Train loss    Test loss     Test metric
0         [1.14e+00]    [1.62e+00]    [1.00e+00]
Training using _train_sgd--------------------------------------------
Total iterations : 1
Iter i0
Current data :
X_train = (array([[ 0.0715442 , -1.3238486 ],
       [-0.95658875,  1.525851  ],
       [ 0.1312452 ,  1.8472403 ]], dtype=float32), array([[4.3563266],
       [4.6872735],
       [1.1838968]], dtype=float32))
y_train = [[ 1.2158731   0.52853215]
 [-1.5013472  -0.99460554]
 [ 1.7602198   0.5754547 ]]
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True), tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([3, 2])
 tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc shape = torch.Size([3, 1]) 
 tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
Calling Independent strategy--------------------------------------
Input x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
Input x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
i = 0
x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
x = tensor([[-0.0601],
        [-0.9845],
        [-0.1878]], grad_fn=<AsStridedBackward0>)
i = 1
x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
x = tensor([[ 0.0931],
        [-0.2357],
        [-0.0486]], grad_fn=<AsStridedBackward0>)
xs = [tensor([[-0.0601],
        [-0.9845],
        [-0.1878]], grad_fn=<AsStridedBackward0>), tensor([[ 0.0931],
        [-0.2357],
        [-0.0486]], grad_fn=<AsStridedBackward0>)]
Ouputs = tensor([[-0.0601,  0.0931],
        [-0.9845, -0.2357],
        [-0.1878, -0.0486]], grad_fn=<CatBackward0>)
x shape =torch.Size([3, 2])
x = tensor([[-0.0601,  0.0931],
        [-0.9845, -0.2357],
        [-0.1878, -0.0486]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[-0.0601,  0.0931],
        [-0.9845, -0.2357],
        [-0.1878, -0.0486]], grad_fn=<CatBackward0>)
targets = tensor([[ 1.2159,  0.5285],
        [-1.5013, -0.9946],
        [ 1.7602,  0.5755]])
End outputs losses in _compile_pytorch------------------------------------
Shape of self.train_state.X_train 2
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True), tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([3, 2])
 tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc shape = torch.Size([3, 1])
 tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
Calling Independent strategy--------------------------------------
Input x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
Input x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
i = 0
x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
x = tensor([[ 0.1067],
        [-1.0654],
        [-0.1942]], grad_fn=<AsStridedBackward0>)
i = 1
x_func = tensor([[ 0.0715, -1.3238],
        [-0.9566,  1.5259],
        [ 0.1312,  1.8472]], requires_grad=True)
x_loc= tensor([[4.3563],
        [4.6873],
        [1.1839]], requires_grad=True)
x = tensor([[ 0.1326],
        [-0.4000],
        [-0.0703]], grad_fn=<AsStridedBackward0>)
xs = [tensor([[ 0.1067],
        [-1.0654],
        [-0.1942]], grad_fn=<AsStridedBackward0>), tensor([[ 0.1326],
        [-0.4000],
        [-0.0703]], grad_fn=<AsStridedBackward0>)]
Ouputs = tensor([[ 0.1067,  0.1326],
        [-1.0654, -0.4000],
        [-0.1942, -0.0703]], grad_fn=<CatBackward0>)
x shape =torch.Size([3, 2])
x = tensor([[ 0.1067,  0.1326],
        [-1.0654, -0.4000],
        [-0.1942, -0.0703]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[ 0.1067,  0.1326],
        [-1.0654, -0.4000],
        [-0.1942, -0.0703]], grad_fn=<CatBackward0>)
targets = tensor([[ 1.2159,  0.5285],
        [-1.5013, -0.9946],
        [ 1.7602,  0.5755]])
End outputs losses in _compile_pytorch------------------------------------
In _compile_pytorch : outputs_losses-------------------------------------------
inputs = (tensor([[1.5000, 1.0000]], requires_grad=True), tensor([[0.]], requires_grad=True))
Start forward------------------------
inputs length = 2
x_func = torch.Size([1, 2])
 tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc shape = torch.Size([1, 1])
 tensor([[0.]], requires_grad=True)
Calling Independent strategy--------------------------------------
Input x_func = tensor([[1.5000, 1.0000]], requires_grad=True)
Input x_loc= tensor([[0.]], requires_grad=True)
i = 0
x_func = tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc= tensor([[0.]], requires_grad=True)
x = tensor([[0.0027]], grad_fn=<AsStridedBackward0>)
i = 1
x_func = tensor([[1.5000, 1.0000]], requires_grad=True)
x_loc= tensor([[0.]], requires_grad=True)
x = tensor([[0.0053]], grad_fn=<AsStridedBackward0>)
xs = [tensor([[0.0027]], grad_fn=<AsStridedBackward0>), tensor([[0.0053]], grad_fn=<AsStridedBackward0>)]
Ouputs = tensor([[0.0027, 0.0053]], grad_fn=<CatBackward0>)
x shape =torch.Size([1, 2])
x = tensor([[0.0027, 0.0053]], grad_fn=<CatBackward0>)
End forward--------------------------
outputs in outputs_losses = tensor([[0.0027, 0.0053]], grad_fn=<CatBackward0>)
targets = tensor([[1.5000, 1.0000]])
End outputs losses in _compile_pytorch------------------------------------
1         [1.03e+00]    [1.62e+00]    [9.89e-01]
End training with sgd-------------------------------
Best model at step 1:
  train loss: 1.03e+00
  test loss: 1.62e+00
  test metric: [9.89e-01]

Finished Training------------------------------------------------
'train' took 0.089657 s

# Parameters: 6962.0
Plotting loss history
Restoring the trained models
Restoring model from deeponet/checkpoints/ode-1.ckpt ...

C:\Users\zzh\AppData\Roaming\Python\Python312\site-packages\deepxde\model.py:1146: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(save_path)
Traceback (most recent call last):
  File "C:\Users\zzh\Desktop\Oxford\dissertation\deeponet\src\harm_oscil_deeponet.py", line 194, in <module>
    main()
  File "C:\Users\zzh\Desktop\Oxford\dissertation\deeponet\src\harm_oscil_deeponet.py", line 175, in main
    model.restore(f"deeponet/checkpoints/{problem}-" + str(train_state.best_step) + ".ckpt", verbose=1)
  File "C:\Users\zzh\AppData\Roaming\Python\Python312\site-packages\deepxde\model.py", line 1146, in restore
    checkpoint = torch.load(save_path)
                 ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\zzh\AppData\Roaming\Python\Python312\site-packages\torch\serialization.py", line 1319, in load
    with _open_file_like(f, "rb") as opened_file:
         ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\zzh\AppData\Roaming\Python\Python312\site-packages\torch\serialization.py", line 659, in _open_file_like
    return _open_file(name_or_buffer, mode)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\zzh\AppData\Roaming\Python\Python312\site-packages\torch\serialization.py", line 640, in __init__
    super().__init__(open(name, mode))
                     ^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'deeponet/checkpoints/ode-1.ckpt'